#!/bin/bash
volume_step=5
max_volume=100
notification_timeout=1500

# Uses regex to get volume from pactl
function get_volume {
    pactl get-sink-volume @DEFAULT_SINK@ | grep -Po '[0-9]{1,3}(?=%)' | head -1
}

# Uses regex to get mute status from pactl
function get_mute {
    pactl get-sink-mute @DEFAULT_SINK@ | grep -Po '(?<=Mute: )(yes|no)'
}

# Displays a volume notification
function show_volume_notif {
    volume=$(get_volume)
    mute=$(get_mute)
    notify-send -t $notification_timeout -h string:x-dunst-stack-tag:volume_notif -h int:value:$volume "Volume: $volume%"
}

# Main function - Takes user input, "volume_up", "volume_down" or "volume_mute"
case $1 in
    up | volume_up)
    # Unmutes and increases volume, then displays the notification
    pactl set-sink-mute @DEFAULT_SINK@ 0
    volume=$(get_volume)
    if [ $(( "$volume" + "$volume_step" )) -gt $max_volume ]; then
        pactl set-sink-volume @DEFAULT_SINK@ $max_volume%
    else
        pactl set-sink-volume @DEFAULT_SINK@ +$volume_step%
    fi
    show_volume_notif
    ;;

    down | volume_down)
    # Raises volume and displays the notification
    pactl set-sink-volume @DEFAULT_SINK@ -$volume_step%
    show_volume_notif
    ;;

    mute | volume_mute)
    # Toggles mute and displays the notification
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    mute=$(get_mute)
    if [ "$mute" = "no" ]; then
        show_volume_notif
    else
        notify-send -t $notification_timeout -h string:x-dunst-stack-tag:volume_notif "Mute"
    fi
    ;;
esac
